#!/usr/bin/env node

const CLI = require('cli-kit').CLI;
const ioslib = require('../dist/index');
const pkgJson = require('../package.json');
const { spawnSync } = require('child_process');

new CLI({
	banner: `${pkgJson.name}, version ${pkgJson.version}`,
	commands: {
		'detect-device-pairs': {
			action: detectDevicePairs,
			args: [
				{
					name: 'xcode-path',
					desc: 'The path to Xcode to use'
				}
			],
			desc: 'Detects all valid iOS and watchOS simulator pairs'
		},
		devices: {
			async action() {
				const devices = await ioslib.devices.getDevices();
				console.log(JSON.stringify(devices, null, '  '));
			},
			desc: 'Lists connected devices'
		},
		info: {
			async action({ argv }) {
				const info = {};
				const types = argv.types
					? Array.from(new Set(argv.types.split(','))).filter(Boolean)
					: [ 'certs', 'keychains', 'provisioning', 'simulator', 'teams', 'xcode' ];
				for (const type of types) {
					switch (type) {
						case 'certs':        info.certs        = await ioslib.certs.getCerts();                       break;
						case 'keychains':    info.keychains    = await ioslib.keychains.getKeychains();               break;
						case 'provisioning': info.provisioning = await ioslib.provisioning.getProvisioningProfiles(); break;
						case 'simulator':
							info.simulator = await ioslib.simulator.generateSimulatorRegistry({
								simulators: await ioslib.simulator.getSimulators(),
								xcodes:     info.xcode || (info.xcode = (await ioslib.xcode.getXcodes()))
							});
							break;
						case 'teams':        info.teams        = await ioslib.teams.getTeams();                       break;
						case 'xcode':        info.xcode        = info.xcode || (await ioslib.xcode.getXcodes());      break;
					}
				}
				console.log(JSON.stringify(info, null, '  '));
			},
			aliases: 'detect',
			args: [
				{
					name: 'types',
					desc: 'Comma-separated list of types to detect'
				}
			],
			desc: 'Detects installed Xcode and iOS information'
		},
		'reset-sims': {
			action: resetSims,
			args: [
				{
					name: 'xcode-path',
					desc: 'The path to Xcode to use'
				}
			],
			desc: 'Removes all simulators and recreates them'
		},
		track: {
			async action() {
				const handle = ioslib.devices.trackDevices();
				handle.on('devices', devices => {
					console.log(JSON.stringify(devices, null, '  '));
					console.log();
				});
			},
			aliases: [ 'trackdevices', 'track-devices' ],
			desc: 'Listens for devices to be connected/disconnected'
		}
	},
	help: true,
	name: pkgJson.name,
	version: pkgJson.version
}).exec()
	.catch(err => {
		console.error(err.message);
		process.exit(err.exitCode || 1);
	});

function getSimCtl(xcodePath) {
	const path = require('path');
	const { existsSync } = require('fs');
	let last;

	if (xcodePath) {
		xcodePath = path.join(xcodePath, 'Contents');
	} else {
		xcodePath = spawnSync('xcode-select', [ '-p' ]).stdout.toString();
	}

	while (last !== xcodePath) {
		if (existsSync(path.join(xcodePath, 'version.plist'))) {
			simctl = path.join(xcodePath, 'Developer', 'usr', 'bin', 'simctl');
			break;
		}
		last = xcodePath;
		xcodePath = path.dirname(xcodePath);
	}

	if (!simctl) {
		throw new Error('Unable to locate simctl');
	}

	return simctl;
}

function detectDevicePairs({ argv }) {
	const startTime = Date.now();
	const simctl = getSimCtl(argv.xcodePath);
	const testSimName = "ioslib_test_sim";

	const getInfo = () => {
		return JSON.parse(spawnSync(simctl, [ 'list', '--json' ]).stdout.toString());
	};

	const createSim = (name, deviceTypeId, runtimeId) => {
		console.log(`Creating ${name} (${deviceTypeId} - ${runtimeId})`);
		const child = spawnSync(simctl, [ 'create', name, deviceTypeId, runtimeId ]);
		return child.status === 0 ? child.stdout.toString().trim() : null;
	};

	const deleteSim = udid => {
		console.log(`Deleting ${udid}`);
		return spawnSync(simctl, [ 'delete', udid ]).status === 0;
	};

	const pair = (watchUdid, phoneUdid) => {
		process.stdout.write(`Pairing ${watchUdid} -> ${phoneUdid}... `);
		const child = spawnSync(simctl, [ 'pair', watchUdid, phoneUdid ]);
		if (child.status === 0) {
			process.stdout.write('success\n');
			return child.stdout.toString().trim();
		}
		process.stdout.write('failed\n');
		return null;
	};

	const unpair = (pairUdid) => {
		console.log(`Unpairing ${pairUdid}`);
		return spawnSync(simctl, [ 'unpair', pairUdid ]).status === 0;
	};

	const cleanup = info => {
		let deleteCount = 0;
		for (const ver of Object.keys(info.devices)) {
			for (const device of info.devices[ver]) {
				if (device.name.startsWith(testSimName) && deleteSim(device.udid)) {
					deleteCount++;
				}
			}
		}
		deleteCount && console.log();
	};

	const info = getInfo();
	cleanup(info);

	const iPhoneDeviceTypeRegExp = /\.iPhone-.+$/;
	const iosSimRuntimeRegExp    = /\.iOS-.+$/;
	const watchDeviceTypeRegExp  = /Apple-Watch.+42mm/;
	const watchSimRuntimeRegExp  = /\.watchOS-.+$/;

	const iphoneDeviceTypes = info.devicetypes.filter(s => iPhoneDeviceTypeRegExp.test(s.identifier));
	const iosRuntimes       = info.runtimes.filter(r => iosSimRuntimeRegExp.test(r.identifier));
	const watchDeviceTypes  = info.devicetypes.filter(s => watchDeviceTypeRegExp.test(s.identifier));
	const watchRuntimes     = info.runtimes.filter(r => watchSimRuntimeRegExp.test(r.identifier));

	const watchDevices = [];
	let results = {};

	const stats = {
		iPhoneSimsCreated: 0,
		watchSimsCreated:  0,
		pairings:          0,
		pairSuccess:       0
	};

	// create the watch sims
	for (const deviceType of watchDeviceTypes) {
		for (const runtime of watchRuntimes) {
			const udid = createSim(`${testSimName}_${stats.watchSimsCreated++}`, deviceType.identifier, runtime.identifier);
			if (udid) {
				console.log(`Created watch sim ${deviceType.name} + ${runtime.name} (${udid})`);
				watchDevices.push({
					udid,
					deviceType,
					runtime
				});
			}
		}
	}

	watchDevices.length && console.log();

	for (const iPhoneDeviceType of iphoneDeviceTypes) {
		for (const iosRuntime of iosRuntimes) {
			stats.iPhoneSimsCreated++;
			const udid = createSim(testSimName, iPhoneDeviceType.identifier, iosRuntime.identifier);

			if (udid) {
				for (const watch of watchDevices) {
					stats.pairings++;
					const pairUdid = pair(watch.udid, udid);

					if (pairUdid) {
						stats.pairSuccess++;
						unpair(pairUdid);

						// console.log({
						// 	iPhoneDeviceType,
						// 	iosRuntime,
						// 	watchDeviceType: watch.deviceType,
						// 	watchRuntime: watch.runtime
						// });

						if (!results[iosRuntime.version]) {
							results[iosRuntime.version] = [];
						}
						if (!results[iosRuntime.version].includes(watch.runtime.version)) {
							results[iosRuntime.version].push(watch.runtime.version);
						}
					}
				}

				deleteSim(udid);
			}
		}
	}

	console.log();
	cleanup(getInfo());

	// sort the results
	results = (function (src) {
		const dest = {};
		for (const key of Object.keys(src).sort()) {
			dest[key] = src[key].sort();
		}
		return dest;
	})(results);

	const delta = Date.now() - startTime;
	const minutes = Math.floor(delta / 60000);
	const seconds = (delta % 60000) / 1000;
	console.log(`Completed in ${minutes}m ${seconds}s\n`);
	console.log(`iPhone Sims Created: ${stats.iPhoneSimsCreated}`);
	console.log(`Watch Sims Created:  ${stats.watchSimsCreated}`);
	console.log(`Pairings:            ${stats.pairings}`);
	console.log(`Successful Pairings: ${stats.pairSuccess}`);
	console.log();
	console.log(results);
}

function resetSims({ argv }) {
	const startTime = Date.now();
	const simctl = getSimCtl(argv.xcodePath);
	const json = JSON.parse(spawnSync(simctl, [ 'list', '--json' ]).stdout.toString());
	const stats = {
		simsRemoved:       0,
		iPhoneSimsCreated: 0,
		tvSimsCreated:     0,
		watchSimsCreated:  0
	};
	const runtimeRegExp = /(iOS|tvOS|watchOS)/;

	for (const runtime of Object.keys(json.devices)) {
		for (const device of json.devices[runtime]) {
			console.log(`Removing ${device.name} (${device.udid})`);
			spawnSync(simctl, [ 'delete', device.udid ]);
			stats.simsRemoved++;
		}
	}
	console.log();

	for (const deviceType of json.devicetypes) {
		for (const runtime of json.runtimes) {
			if (runtime.isAvailable || runtime.availability === '(available)') {
				process.stdout.write(`Creating ${deviceType.name} with ${runtime.name}... `);
				try {
					spawnSync(simctl, [ 'create', `${deviceType.name} ${runtime.name}`, deviceType.identifier, runtime.identifier ]);
					console.log('SUCCESS!');

					const m = runtime.identifier.match(runtimeRegExp);
					switch (m && m[0]) {
						 case 'iOS':      stats.iPhoneSimsCreated++;  break;
						 case 'tvOS':     stats.tvSimsCreated++;      break;
						 case 'watchOS':  stats.watchSimsCreated++;   break;
					}
				} catch (e) {
					console.log(`FAILED! ${e.toString()}`);
				}
			}
		}
	}
	console.log();

	const delta = Date.now() - startTime;
	const minutes = Math.floor(delta / 60000);
	const seconds = (delta % 60000) / 1000;
	console.log(`Completed in ${minutes}m ${seconds}s\n`);
	console.log(`Sims Removed:        ${stats.simsRemoved}`);
	console.log(`iPhone Sims Created: ${stats.iPhoneSimsCreated}`);
	console.log(`TV Sims Created:     ${stats.tvSimsCreated}`);
	console.log(`Watch Sims Created:  ${stats.watchSimsCreated}`);
}
